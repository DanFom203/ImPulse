
    import { Stomp } from '@stomp/stompjs'
    import { getTokenFromStorage } from '@/services/localData.js'
    import axios from 'axios'

    export default {
    props: {
    interlocutor: {
    type: Object,
    required: true
}
},
    data() {
    return {
        stompClient: null,
        connected: false,
        messages: [],
        messageText: '',
        currentUserId: null,
        pollingInterval: null,
        currentUserRole: null,
}
},
    mounted() {
        console.log('üîç mounted: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω')
        const token = getTokenFromStorage()
        if (token) {
        const payload = JSON.parse(atob(token.split('.')[1]))
        this.currentUserId = payload.id
        this.currentUserRole = payload.role || 'Client'
    console.log('üîç currentUserId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', this.currentUserId)
} else {
    console.warn('‚ö†Ô∏è mounted: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞')
}

    this.loadChatHistory()
    this.connect()

    this.pollingInterval = setInterval(this.pollForNewMessages, 10000)
},
    beforeDestroy() {
    if (this.pollingInterval) {
    clearInterval(this.pollingInterval)
    this.pollingInterval = null
}
},
    methods: {
        capitalize(str) {
            if (!str) return ''
            return str.charAt(0).toUpperCase() + str.slice(1)
        },
    async pollForNewMessages() {
    console.log('üîÑ pollForNewMessages: –æ–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–∞...')
    const token = getTokenFromStorage()
    if (!token) {
    console.warn('‚ö†Ô∏è pollForNewMessages: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞')
    return
}

    try {
    const response = await axios.get('http://localhost:8080/api/chat/history', {
    headers: { Authorization: `Bearer ${token}` },
    params: { interlocutorId: this.interlocutor.id }
})

    const newMessages = response.data

    if (newMessages.length > this.messages.length) {
    console.log('üì• pollForNewMessages: –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
    this.messages = newMessages
    this.scrollToBottom()
} else {
    console.log('üì≠ pollForNewMessages: –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç')
}
} catch (err) {
    console.error('‚ùå pollForNewMessages: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:', err)
}
},
    async loadChatHistory() {
    console.log('üîç loadChatHistory: –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è interlocutorId=', this.interlocutor.id)
    const token = getTokenFromStorage()
    if (!token) {
    console.warn('‚ö†Ô∏è loadChatHistory: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –≤—ã—Ö–æ–¥')
    return alert('Not authenticated')
}

    try {
    const response = await axios.get('http://localhost:8080/api/chat/history', {
    headers: { Authorization: `Bearer ${token}` },
    params: { interlocutorId: this.interlocutor.id }
})
    console.log('üîç loadChatHistory: –ø–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π', response.data)
    this.messages = response.data
    this.scrollToBottom()
} catch (error) {
    console.error('‚ùå loadChatHistory: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error.response?.data || error)
}
},
    connect() {
    console.log('üîç connect: –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket')
    const token = getTokenFromStorage()
    if (!token) {
    console.warn('‚ö†Ô∏è connect: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –≤—ã—Ö–æ–¥')
    return alert('Not authenticated')
}

    if (this.connected) {
    console.log('‚ÑπÔ∏è connect: —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –≤—ã—Ö–æ–¥')
    return
}

    this.stompClient = Stomp.client('ws://localhost:8080/ws')
    this.stompClient.reconnect_delay = 5000

    this.stompClient.connect(
{ Authorization: `Bearer ${token}` },
    frame => {
    this.connected = true
    console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω:', frame)
    this.stompClient.subscribe('user/queue/reply', this.onMessageReceived)
    console.log('üîç WebSocket –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ /queue/reply —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
},
    error => {
    console.error('‚ùå STOMP connection error:', error)
}
    )
},
    onMessageReceived(msg) {
    console.log('üîç onMessageReceived: –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', msg);

    const token = getTokenFromStorage();
    if (!token) {
    console.warn('‚ö†Ô∏è onMessageReceived: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞');
    return;
}

    const payload = JSON.parse(msg.body);
    console.log('üîç onMessageReceived: —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π payload:', payload);
    console.log('üßæ onMessageReceived: JSON —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ msg.body:\n', JSON.stringify(payload, null, 2));


    if (
    (payload.senderId === this.interlocutor.id && payload.receiverId === this.currentUserId) ||
    (payload.senderId === this.currentUserId && payload.receiverId === this.interlocutor.id)
    ) {
    console.log('üîç onMessageReceived: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤');
    this.messages.push(payload);
    this.scrollToBottom();
} else {
    console.log('‚ÑπÔ∏è onMessageReceived: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
}
},
        sendMessage() {
            console.log('üîç sendMessage: –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')
            if (!this.connected) {
                console.warn('‚ö†Ô∏è sendMessage: WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω')
                return
            }
            if (!this.messageText.trim()) {
                console.warn('‚ö†Ô∏è sendMessage: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
                return
            }

            const token = getTokenFromStorage()
            if (!token) {
                console.warn('‚ö†Ô∏è sendMessage: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞')
                return alert('Not authenticated')
            }


            const currentUserRole = this.getUserRole(this.currentUserId)

            const payload = {
                senderId: this.currentUserId,        // —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                senderRole: currentUserRole,         // —Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (client / specialist)
                receiverId: this.interlocutor.id,
                body: this.messageText.trim()
            }

            console.log('üîç sendMessage: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ STOMP:', payload)
            this.stompClient.send('/app/chat',
                { Authorization: `Bearer ${token}` },
                JSON.stringify(payload)
            )

            this.messageText = ''
            this.messages.push(payload)  // –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–æ–ª—å—é
            this.scrollToBottom()
            console.log('üîç sendMessage: –ø–æ–ª–µ –≤–≤–æ–¥–∞ –æ—á–∏—â–µ–Ω–æ')
        },
        getUserRole(userId) {

            if (userId === this.currentUserId) {
                return this.interlocutor.role === 'specialist' ? 'client' : 'specialist'
            } else if (userId === this.interlocutor.id) {
                return this.interlocutor.role
            }
            return 'unknown'
        },
    }
}

